<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL 8.0手动安装</title>
      <link href="/2022/08/30/mysql/"/>
      <url>/2022/08/30/mysql/</url>
      
        <content type="html"><![CDATA[<p>    最近开发SAAS系统，遇到公司的云数据库到期，需要搭建自用开发数据库；参考官方的源安装模式，但是卓所周知，网速极慢，手动下载官方rpm包，又出现各种依赖缺失；醉了，装个数据各种坑，最后还是决定直接使用离线全包的方式直接解压缩安装配置。</p><h2 id="下载MySQL8-0最新的程序"><a href="#下载MySQL8-0最新的程序" class="headerlink" title="下载MySQL8.0最新的程序"></a>下载MySQL8.0最新的程序</h2><blockquote><p>oracle官网提供mysql相关下载地址，网速快可以直接使用；</p><p>    <a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p>阿里云镜像站MySQL，直接下载最新的安装包</p><p>    <a href="https://mirrors.aliyun.com/mysql/MySQL-8.0/?spm=a2c6h.25603864.0.0.2210712b9dkmQd">mysql-MySQL-8.0安装包下载_开源镜像站-阿里云 (aliyun.com)</a></p></blockquote><ul><li>注意下载完整的tar文件，不要下载 minimal压缩包，minimal压缩包中不包含innodb引擎</li></ul><p>推荐使用 阿里云镜像站下载</p><img title="" src="mysql/mysql_tar.png" alt="" data-align="inline"><p>解压到自己的安装目录</p><img src="/2022/08/30/mysql/mysql_dir.png" class=""><p>本文将以 /opt/mysql作为mysql安装包的根目录</p><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><ul><li>首先创建MySQL用户</li></ul><p>    MySQL数据库不建议采用root账号直接启动安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd mysql # ubuntu 使用 adduser mysql</span><br></pre></td></tr></table></figure><ul><li>删除系统中残存的所有mysql信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找出mysql相关软件，包括mariadb</span></span><br><span class="line">rpm -qa | grep mysql </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除软件</span></span><br><span class="line">rpm -e xxx</span><br></pre></td></tr></table></figure><ul><li>解压文件到 /opt/mysql</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先下载对应的 软件 wget https://mirrors.aliyun.com/mysql/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar.xz</span></span><br><span class="line">tar -xf mysql-8.0.27-linux-glibc2.12-x86_64.tar.xz -C /opt/mysql</span><br><span class="line"></span><br><span class="line">mv /opt/mysql/mysql-8.0.27-linux-glibc2.12-x86_64/* /opt/mysql/</span><br><span class="line">rm -rf /opt/mysql/mysql-8.0.27-linux-glibc2.12-x86_64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建必要目录</span></span><br><span class="line">mkdir -p /opt/mysql/data</span><br><span class="line">mkdir -p /opt/mysql/tmp</span><br><span class="line">mkdir -p /opt/mysql/log</span><br></pre></td></tr></table></figure><ul><li>更改权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -hR mysql:mysql /opt/mysql</span><br></pre></td></tr></table></figure><ul><li>创建MySQL关键配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/mysql/my.cnf</span><br></pre></td></tr></table></figure><blockquote><p>注意在配置MySQL8.0时需要查看MySQL8.0支持的参数，部分参数已经移除，不能直接使用MySQL5.7中的部分参数，不向下兼容</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># client连接信息，配置默认访问端口号和MySQL server PID文件路径</span></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span>=/opt/mysql/tmp/mysql.lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql server配置信息</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">basedir</span>=/opt/mysql</span><br><span class="line"><span class="attr">datadir</span>=/opt/mysql/data</span><br><span class="line"><span class="attr">tmpdir</span>=/opt/mysql/tmp</span><br><span class="line"><span class="attr">socket</span>=/opt/mysql/tmp/mysql.lock</span><br><span class="line"><span class="attr">pid-file</span>=/opt/mysql/log/mysql.pid</span><br><span class="line"><span class="attr">skip_name_resolve</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="attr">transaction_isolation</span>=READ-COMMITTED</span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_general_ci</span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span> <span class="comment">#是否对SQL语句大小写敏感，1表示不敏感</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">40000</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">1000</span></span><br><span class="line"><span class="attr">log_error</span>=/opt/mysql/log/error.log</span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>初始化数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先配置 MySQL的命令行到 环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下信息</span></span><br><span class="line">export MYSQL_HOME=/opt/mysql</span><br><span class="line">export PATH=$PATH:$MYSQL_HOME/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p> 先初始化数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure><p>使用命令启动数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/mysql/bin/mysqld_safe --basedir=/opt/mysql</span><br></pre></td></tr></table></figure><p>如果正常启动则退出，之后配置systemd</p><h2 id="配置Systemd"><a href="#配置Systemd" class="headerlink" title="配置Systemd"></a>配置Systemd</h2><blockquote><p>systemd相关的内容请参考Redhat官方关于systemd介绍 </p><p>    <a href="https://access.redhat.com/articles/754933">Overview of systemd for RHEL 7 - Red Hat Customer Portal</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/mysql8.service</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MySQL database server</span><br><span class="line"><span class="attr">After</span>=syslog.target</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="comment"># 配置启动用户 ，不建议使用root，建议采用最小权限用户，甚至可以使用不可登录的账号启动</span></span><br><span class="line"><span class="attr">User</span>=mysql</span><br><span class="line"><span class="attr">Group</span>=mysql</span><br><span class="line"><span class="comment"># 启动 mysql数据库的命令，注意不要使用 nohup</span></span><br><span class="line"><span class="attr">ExecStart</span>=/opt/mysql/bin/mysqld_safe --basedir=/opt/mysql</span><br><span class="line"></span><br><span class="line"><span class="attr">TimeoutSec</span>=<span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>使用加载最新的systemd文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql8</span><br><span class="line"></span><br><span class="line">systemctl status mysql8</span><br></pre></td></tr></table></figure><h2 id="初始化数据库并配置账号密码"><a href="#初始化数据库并配置账号密码" class="headerlink" title="初始化数据库并配置账号密码"></a>初始化数据库并配置账号密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化数据库</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先找到临时密码</span></span><br><span class="line">cat /opt/mysql/log/error.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化安装mysql数据库</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按照提示配置权限账号密码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;admin&#x27;@&#x27;%&#x27; INDENTIFIED BY &#x27;Changeme_123&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;admin&#x27;@&#x27;%&#x27; INDENTIFIED BY &#x27;Changeme_123&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置全局https</title>
      <link href="/2022/08/29/nginx-https/"/>
      <url>/2022/08/29/nginx-https/</url>
      
        <content type="html"><![CDATA[<p>    最近在开发微信小程序后台服务时碰到http协议被限制的问题，微信小程序强制所有内部访问的接口必须是https协议否则无法请求，然而我们内部配置的开发和线上运行环境均采用http；必须将协议全部配置https才能使微信小程序正常访问</p><h1 id="生成对应域名的证书文件"><a href="#生成对应域名的证书文件" class="headerlink" title="生成对应域名的证书文件"></a>生成对应域名的证书文件</h1><p>    公司统一使用阿里云dns，可以在阿里云域名解析上生成免费ssl证书，具体参考 <a href="https://developer.aliyun.com/article/875508">2022阿里云免费SSL证书申请全过程（图文详解）-阿里云开发者社区 (aliyun.com)</a></p><p>    各大云厂商也有自己ssl证书 <a href="https://cloud.tencent.com/product/ssl">SSL证书_免费SSL证书-付费SSL证书_服务器证书-腾讯云 (tencent.com)</a> 等等。</p><p>    如果不想使用云厂商的ssl证书 可以使用 Let’s Encrypt 开源官方 ssl证书 <a href="https://letsencrypt.org/zh-cn/">Let’s Encrypt - 免费的SSL/TLS证书 (letsencrypt.org)</a></p><p>    也可以使用 certbot <a href="https://certbot.eff.org/instructions">Certbot Instructions | Certbot (eff.org)</a> 工具快速配置https</p><p>    </p><h1 id="检查nginx"><a href="#检查nginx" class="headerlink" title="检查nginx"></a>检查nginx</h1><p>    开始配置前需要检查nginx运行状态和版本</p><ul><li>首先找到nginx的配置文件位置，采用包直接安装通常配置文件的位置都在 /etc/nginx/nginx.conf文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -h</span><br></pre></td></tr></table></figure><img src="/2022/08/29/nginx-https/nginx_conf.png" class="" title="nginx_conf"><ul><li>将对应的证书放置到合适的目录</li></ul><p>    nginx配置了多目录配置文件，建议将ssl证书文件放在对应的配置文件中，并且创建ssl目录单独放置ssl证书文件</p><img src="/2022/08/29/nginx-https/nginx_ssl.png" class=""><ul><li>配置nginx ssl</li></ul><p>    首先我们打开配置文件 xxx-cloud.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim xxx-cloud.conf</span><br></pre></td></tr></table></figure><p>    修改相关配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置反向代理的gateway</span></span><br><span class="line"><span class="section">upstream</span> saas_gateway&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.82:18760</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> ssl_fdfs_group01 &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8061</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> ssl_fdfs_group02 &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8062</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2; <span class="comment"># 使用 ssl，最新版本的 不再继续支持单独 ssl on指令</span></span><br><span class="line">    <span class="attribute">server_name</span> saas.xxx-cloud.cn;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">limit_conn</span> addr <span class="number">10000</span>;</span><br><span class="line">    <span class="attribute">limit_req</span> zone=one burst=<span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ssl on;</span></span><br><span class="line">    <span class="comment"># 重点 ssl证书对 pem文件和 key文件，部分云厂商生成的信息都是放在相同的文件中</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/conf.d/xxx-cloud-ssl/saas.xxx-cloud.cn.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/conf.d/xxx-cloud-ssl/saas.xx-cloud.cn.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&quot;EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&quot;</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> builtin:<span class="number">2000</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="comment"># openssl dhparam -out /usr/local/nginx/conf/ssl/dhparam.pem 2048</span></span><br><span class="line">    <span class="comment"># ssl_dhparam /usr/local/nginx/conf/ssl/dhparam.pem;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">root</span> /opt/saas_web/static/dist/; <span class="comment"># 静态文件放置的位置</span></span><br><span class="line">    <span class="comment"># API地址代理转发</span></span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">                                    <span class="attribute">client_max_body_size</span> <span class="number">20m</span>;</span><br><span class="line">                                    <span class="attribute">proxy_connect_timeout</span> <span class="number">30</span>;</span><br><span class="line">                                    <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line">                                    <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line">                                    <span class="attribute">proxy_pass</span> http://saas_gateway/api;</span><br><span class="line">                                    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">                                    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                                    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># fastdfs转发</span></span><br><span class="line">    <span class="section">location</span> /group1&#123;</span><br><span class="line">            <span class="attribute">proxy_next_upstream</span> http_502 http_504 <span class="literal">error</span> timeout invalid_header;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://ssl_fdfs_group01;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$arg_attname</span> <span class="regexp">~* .(pdf|jpg|png|docs|ai|jpeg)$)</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attribute">add_header</span> Content-Disposition <span class="string">&quot;attachment; filename=<span class="variable">$arg_attname</span>&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">location</span> /group2&#123;</span><br><span class="line">            <span class="attribute">proxy_next_upstream</span> http_502 http_504 <span class="literal">error</span> timeout invalid_header;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://ssl_fdfs_group02;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$arg_attname</span> <span class="regexp">~* .(pdf|jpg|png|docs|ai|jpeg)$)</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attribute">add_header</span> Content-Disposition <span class="string">&quot;attachment; filename=<span class="variable">$arg_attname</span>&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="section">location</span> = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制将所有的http请求重定向到 https</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;    </span><br><span class="line">    <span class="attribute">server_name</span>  saas.xxx-cloud.cn;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查配置，加载nginx</li></ul><blockquote><p>注意 ： nginx不要直接重启或者直接装载配置文件；以免发生不必要的错误</p><p>    1、首先使用 nginx -t 命令检查配置文件是不是有错误，没有错误继续下一步操作，如果有错误及时查资料修改</p><p>    2、使用 nginx -t reload命令加载配置文件    </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><img src="/2022/08/29/nginx-https/nginx_t.png" class=""><p>测试通过，配置无误; 加载配置文件，正常访问，小程序也打通。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><blockquote><p>需要注意：</p><p>    由于更改了http到https，如果原先的数据库表中大量存在http协议的静态文件访问，在web端或者任何使用https服务器都不能在页面中访问http链接，需要统一更改成https链接。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM2 挂盘</title>
      <link href="/2022/08/24/lvm2mount/"/>
      <url>/2022/08/24/lvm2mount/</url>
      
        <content type="html"><![CDATA[<blockquote><p>命令工具 (centos)</p><p>    lvm2</p><p>    lsblk</p><p>    blkid</p><p>    mkfs.ext4</p></blockquote><ul><li>首先需要安装lvm2工具包</li></ul><blockquote><p>lvm2工具包是epel中的工具，先安装 epel 再安装 lvm2 ，具体安装epel可参考阿里镜像源处理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lvm2</span><br></pre></td></tr></table></figure><p>lvm2 共有 12个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建命令</span></span><br><span class="line">pvcreate</span><br><span class="line">vgcreate</span><br><span class="line">lvcreate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看命令</span></span><br><span class="line">pvscan</span><br><span class="line">vgscan</span><br><span class="line">lvscan</span><br><span class="line">pvdisplay</span><br><span class="line">vgdisplay</span><br><span class="line">lvdisplay</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩容命令</span></span><br><span class="line">vgexted</span><br><span class="line">lvextend</span><br><span class="line">resize2fs</span><br></pre></td></tr></table></figure><h2 id="创建物理卷"><a href="#创建物理卷" class="headerlink" title="创建物理卷"></a>创建物理卷</h2><blockquote><p>首先通过 lsblk查看没有被挂载的磁盘 </p></blockquote><img src="/2022/08/24/lvm2mount/lsblk.png" class="" title="lsblk"><blockquote><p>使用 pvcreate 命令创建 物理卷</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/vdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pvdisplay</span><br></pre></td></tr></table></figure><blockquote><p> 运行结果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Physical volume &quot;/dev/vdb&quot; successfully created.</span><br><span class="line"></span><br><span class="line">  &quot;/dev/vdb&quot; is a new physical volume of &quot;1.99 TiB&quot;</span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/vdb</span><br><span class="line">  VG Name               </span><br><span class="line">  PV Size               1.99 TiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0   </span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               HKROb6-76we-bIga-PdZl-791Q-m3au-SNleNF</span><br></pre></td></tr></table></figure><h2 id="创建卷组"><a href="#创建卷组" class="headerlink" title="创建卷组"></a>创建卷组</h2><blockquote><p>使用 vgcreate 命令创建 物理卷组</p><p>参数</p><p>    vgcreate [物理卷组名] [物理卷盘符路径…]</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vgcreate vg1 /dev/vdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vgdisplay</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Volume group &quot;vg1&quot; successfully created</span><br><span class="line"></span><br><span class="line">  --- Volume group ---</span><br><span class="line">VG Name               vg1</span><br><span class="line">System ID             </span><br><span class="line">Format                lvm2</span><br><span class="line">Metadata Areas        1</span><br><span class="line">Metadata Sequence No  1</span><br><span class="line">VG Access             read/write</span><br><span class="line">VG Status             resizable</span><br><span class="line">MAX LV                0</span><br><span class="line">Cur LV                0</span><br><span class="line">Open LV               0</span><br><span class="line">Max PV                0</span><br><span class="line">Cur PV                1</span><br><span class="line">Act PV                1</span><br><span class="line">VG Size               1.99 TiB</span><br><span class="line">PE Size               4.00 MiB</span><br><span class="line">Total PE              522239</span><br><span class="line">Alloc PE / Size       0 / 0   </span><br><span class="line">Free  PE / Size       522239 / 1.99 TiB</span><br><span class="line">VG UUID               2Inkii-meFJ-HXzJ-aG9P-qKtW-RsMK-7h2ZJ8</span><br></pre></td></tr></table></figure><h2 id="创建逻辑卷"><a href="#创建逻辑卷" class="headerlink" title="创建逻辑卷"></a>创建逻辑卷</h2><blockquote><p>使用 lvcreate 创建逻辑卷</p><p>    命令参数</p><p>    lvcreate -n [逻辑卷名] -l [逻辑卷大小，必须小于挂载的物理卷组] [物理卷组名]</p><p>注意 -l 参数可以写具体MB GB等参数也可以直接使用 全部物理卷，或者剩余物理卷 参数 100%VG全部卷组 100%free</p><p>      -l|–extents LogicalExtentsNumber[%{VG|PVS|FREE}] |（逻辑扩展数）<br>      -L|–size LogicalVolumeSize[bBsSkKmMgGtTpPeE]}（逻辑卷大小）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -n lv1 -l 100%VG vg1</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Logical volume &quot;lv1&quot; created.</span><br><span class="line"></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg1/lv1</span><br><span class="line">  LV Name                lv1</span><br><span class="line">  VG Name                vg1</span><br><span class="line">  LV UUID                zLuEBB-Yp5j-2Cs1-req0-rAmP-Tfy0-ygQbcG</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time 32v64g2t-0001.novalocal, 2022-08-24 15:29:03 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">open                 0</span></span><br><span class="line">  LV Size                1.99 TiB</span><br><span class="line">  Current LE             522239</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     8192</span><br><span class="line">  Block device           252:0</span><br></pre></td></tr></table></figure><h2 id="格式化磁盘"><a href="#格式化磁盘" class="headerlink" title="格式化磁盘"></a>格式化磁盘</h2><blockquote><p>先找到 lv path (命令 lvdisplay查看没有被使用的逻辑卷)</p><p>    eg: /dev/vg1/lv1</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/vg1/lv1</span><br></pre></td></tr></table></figure><blockquote><p>命令 blkid找到刚才格式化的逻辑卷</p><p>修改 /etc/fstab 将对应的 磁盘挂载到指定的目录上完成挂盘</p></blockquote><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/dev/sr0: BLOCK_SIZE=&quot;2048&quot; UUID=&quot;2022-04-18-10-44-39-00&quot; LABEL=&quot;config-2&quot; TYPE=&quot;iso9660&quot;</span><br><span class="line">/dev/vda1: UUID=&quot;74360858-0ff7-40cc-b0e5-ff2f1ab6f15d&quot; BLOCK_SIZE=&quot;1024&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;efa216ac-01&quot;</span><br><span class="line">/dev/vda2: UUID=&quot;f1539e07-2ec4-4bed-8f6d-58c1086a3fdc&quot; TYPE=&quot;swap&quot; PARTUUID=&quot;efa216ac-02&quot;</span><br><span class="line">/dev/vda3: UUID=&quot;2dace56d-268b-4513-9d0a-5c7c0f636aa6&quot; BLOCK_SIZE=&quot;512&quot; TYPE=&quot;xfs&quot; PARTUUID=&quot;efa216ac-03&quot;</span><br><span class="line">/dev/vdb: UUID=&quot;HKROb6-76we-bIga-PdZl-791Q-m3au-SNleNF&quot; TYPE=&quot;LVM2_member&quot;</span><br><span class="line">/dev/mapper/vg1-lv1: UUID=&quot;7c7a387b-b2f9-4ced-a9d8-9535c7e8e88d&quot; BLOCK_SIZE=&quot;4096&quot; TYPE=&quot;ext4&quot;</span><br></pre></td></tr></table></figure><p>注意lvm格式化的逻辑卷有点特殊，与fdisk分区挂盘产生的名称不太一样 名称 规则 /dev/mapper/[物理卷组名]-[逻辑卷组名] 对应的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/mapper/vg1-lv1: UUID=&quot;7c7a387b-b2f9-4ced-a9d8-9535c7e8e88d&quot; BLOCK_SIZE=&quot;4096&quot; TYPE=&quot;</span><br></pre></td></tr></table></figure><p>修改 /etc/fstab 添加信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=7c7a387b-b2f9-4ced-a9d8-9535c7e8e88d /opt/data                    ext4    defaults        1 2</span><br></pre></td></tr></table></figure><p>使用 mount -a 和 df -h查看是否成功挂盘</p><img src="/2022/08/24/lvm2mount/mount_result.png" class=""><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LVM2 </tag>
            
            <tag> 挂盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 学习系列(二)</title>
      <link href="/2022/08/23/jvm2/"/>
      <url>/2022/08/23/jvm2/</url>
      
        <content type="html"><![CDATA[<h2 id="本地方法接口-–-Native-Interface"><a href="#本地方法接口-–-Native-Interface" class="headerlink" title="本地方法接口 – Native Interface"></a>本地方法接口 – Native Interface</h2><blockquote><p>本地方法接口(Java Native Interface，JNI)是Java为了融合C/C++程序，Java诞生是C/C++横行时代，想要立足必须能够调用C/C++程序；JVM中开辟了一块区域用于 标记native代码。</p><p>例如 Java Object超类中大量存在 native接口方法；native方法本身不是 Java代码，只有方法签名，类似接口；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.HotSpotIntrinsicCandidate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeoutMillis)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地方法栈-–-Native-Method-Stack"><a href="#本地方法栈-–-Native-Method-Stack" class="headerlink" title="本地方法栈 – Native Method Stack"></a>本地方法栈 – Native Method Stack</h2><blockquote><p>如上所述 ， 虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</p></blockquote><h2 id="堆-–-Heap"><a href="#堆-–-Heap" class="headerlink" title="堆 – Heap"></a>堆 – Heap</h2><blockquote><p>堆（Heap）历经多代版本的发展，最具典型的Java 1.7 Java8 Java11；本文就已此三个版本深入浅出分析一下 堆的分布和发展</p></blockquote><h4 id="Java7-堆结构"><a href="#Java7-堆结构" class="headerlink" title="Java7 堆结构"></a>Java7 堆结构</h4><img src="/2022/08/23/jvm2/Java7heap.png" class="" title="java7"><h4 id="Java8-堆结构"><a href="#Java8-堆结构" class="headerlink" title="Java8 堆结构"></a>Java8 堆结构</h4><img src="/2022/08/23/jvm2/Java8heap.png" class="" title="java8"><p>  Java7中jvm堆内存分为 新生代 老年代 永久代，其中新生代又分为，eden space 和 survivor，survivor再分为 From和To；From和To是相对的概念，随着垃圾回收不断变换，谁空谁是To；Java8中将永久代移除用元数据空间取代；元数据空间本质和永久代类似。元数据空间和永久代的本质区别，永久代在堆中，元数据空间不是使用虚拟机堆内存而是直接使用物理内存。</p><blockquote><p>堆之所以会分为不同区，是因为在Java程序中对象的生命周期不同，大多数对象都是临时对象，用完及时释放，这类对象在新生代中都是 “朝生夕死”。假如不分区垃圾回收都是直接扫描全部的内存空间，分区后垃圾回收只需要在小范围内收集垃圾。分区是为了优化jvm垃圾回收器的性能。</p></blockquote><h4 id="Java11-堆结构"><a href="#Java11-堆结构" class="headerlink" title="Java11  堆结构"></a>Java11  堆结构</h4><p>    Java11中引入zgc后，堆内存不再有分区概念，Java11中将内存分为page页；ZGC支持三种页大小 ；小中大；其中小页是指 2MB大小内存，中页是32MB大小内存，大页受操作系统控制 是2n MB大小;JDK14之前，2GC仅Linux才支持。尽管许多使用zGc的用户都使用类Linux的环境，但在Windows和macos上，人们也需要zGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，2GC特性被移植到了Windows和macos上。</p><p>现在mac或Windows上也能使用zGC了，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockExperimentalVMOptions-XX：+UseZGC</span><br></pre></td></tr></table></figure><h4 id="堆空间分配内存的过程"><a href="#堆空间分配内存的过程" class="headerlink" title="堆空间分配内存的过程"></a>堆空间分配内存的过程</h4><ul><li><p>首先所有的新生对象都在Eden Space出现，刚开始Survivor和Old Generation都是空的</p></li><li><p>随着对象的不断创建，Eden Space被填充满，此时触发 Minor GC 删除未被引用的对象，并且将存活的对象放入 Survivor From区，然后清空 Eden Space</p></li><li><p>随着对象的不断创建 Eden Space 再次被填充满，此时触发第二次 Minor GC ,删除未被引用的对象，此时与上一次Minor GC有所不同，首先From区中的对象和Eden Space存活的对象都将移动到 To区，From区被清空，From和To属性交换，同时原有的From区中的对象年龄加1。 随着Minor GC不断触发，From和To区不断在交换，当幸存者年龄达到指定阈值（JVM中参数 MaxTenuringThreshold决定），对象被移动到老年代。</p></li><li><p>随着Minor GC不断进行，导致老年代内存占满，此时触发 Major GC（或者Full GC）进行老年代内存清理，若Major GC处理完后依然无法进行对象内存分配，就会产生 OOM异常。</p></li></ul><blockquote><p>通过上述分析：</p><p>    会有几种特殊情况导致内存直接分配到老年代</p><p>1、对象创建后，无法直接放入Eden Space（不如Eden Space大小设置成 10m，但是对象是 70m），此时触发 YGC（Minor GC），Minor GC清空Eden Space，还是放不下对象，就会将对象直接放入 老年代。当然老年代放不下 会触发 FGC，FGC后还放不下就直接抛出OOM。</p><p>2、触发YGC后，Survivor中无法放入，就直接晋升到老年代</p><p>3、如果Survivor中年龄相同的所有对象的大小大于Survivor空间的一半，年龄大于或者等于这些对象年龄的对象将直接晋升到老年代，无需等待年龄达到阈值。</p></blockquote><p>常见堆参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-Xms</td><td>设置堆初始内存，默认情况是当前物理内存大小的1/64</td></tr><tr><td>-Xmx</td><td>设置堆的最大内存，默认情况是当前物理内存大小的1/4</td></tr><tr><td>-XX:Newratio</td><td>设置新生代和老年代的比例，默认值是2，及老年代是新生代的2倍，占堆内存的2/3</td></tr><tr><td>-XX:Survivorratio</td><td>设置Eden Space和Survivor的比例，默认情况是8，及Eden Space是Survivor的8倍（两个Survivor是相同的内存大小，8:1:1），如果设置成4 及变成 4:1:1</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>设置Survivor存活次数，默认是15，也可成为年龄</td></tr></tbody></table><h2 id="方法区-–-Method-Area"><a href="#方法区-–-Method-Area" class="headerlink" title="方法区 – Method Area"></a>方法区 – Method Area</h2><p>    方法区并不是名称所描述的存放方法的区域，而是提供线程共享的内存区域，用于存储JVM加载的类信息、常量、静态变量、即时编译器编译后的代码缓存等信息；由此可以理解方法区是一种规范。</p><ul><li> 方法区大小</li></ul><p>    方法区的大小决定程序内沟沟加载多少个类，例如程序定义过多的类，导致加载的内占用过多的内存，方法区内存溢出，JVM抛出 OOM。以Java8为例，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=xxx</span><br></pre></td></tr></table></figure><p>    设置元数据空间初始大小，也可通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxMetaspsaceSize=xxx</span><br></pre></td></tr></table></figure><p>    设置元数据空间的最大值，默认情况下 MaxMetasapceSize=-1,没有限制</p><ul><li>方法区、堆和栈的关系</li></ul><img src="/2022/08/23/jvm2/method_heap_stack.png" class=""><ul><li>方法区的变化</li></ul><table><thead><tr><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>jdk1.7之前</td><td>有永久代，静态变量都发在永久代上</td></tr><tr><td>jdk1.7</td><td>逐步去永久代，字符串常量池、静态变量移除，放入堆中</td></tr><tr><td>jdk1.8</td><td>无永久代，元数据空间出现；常量保存在本地元数据空间，字符串常量池、静态变量任然保存在堆中</td></tr></tbody></table><h2 id="执行引擎-–-Excecution-Engine"><a href="#执行引擎-–-Excecution-Engine" class="headerlink" title="执行引擎 – Excecution Engine"></a>执行引擎 – Excecution Engine</h2><p>    类加载器加载的字节码并不是操作系统能够直接运行的本地机器指令，执行引擎的作用就是将字节码文件解释成本地机器指令，供操作系统直接运行。换言之执行引擎就是本地机器语言的翻译官，将字节码翻译成本地机器指令</p><ul><li><p>解释器（Interpreter）：JVM在程序运行时通过解释器逐行将字节码转为本地机器指令执行；</p></li><li><p>JIT编译器（Just In Time Compiler，即时编译器）：解释器的优点是程序一启动就可以马上发挥作用，逐行翻译字节码执行程序。而对于一些高频的代码（如循环体内代码和高频调用方法等），如果每次执行都用解释器逐行将字节码翻译为机器指令的话，势必会造成浪费，所以我们可以通过即时编译器将这部分高频代码直接编译为机器指令然后缓存在方法区中（上面介绍方法区内部组成时提到过JIT代码缓存），以此提高执行效率。和解释器相比，即时编译器的缺点就是编译需要耗费一定时间。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 学习系列 (一)</title>
      <link href="/2022/08/22/jvm/"/>
      <url>/2022/08/22/jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM结构"><a href="#JVM结构" class="headerlink" title="JVM结构"></a>JVM结构</h2><blockquote><p>jvm Hotspot 模型如下图所示</p></blockquote><img src="/2022/08/22/jvm/JVM.png" class="" title="jvm"><p>上图所示 jvm 中 Java stack，Native Method Stack ，Program Counter Register 是线程私有，不存在线程安全问题 ；Method Area 和Heap 是线程共享区</p><h2 id="类加载器-–-Classloader"><a href="#类加载器-–-Classloader" class="headerlink" title="类加载器 – Classloader"></a>类加载器 – Classloader</h2><blockquote><p>类加载器（Classloader）负责加载 class，类加载器将class文件字节码解析到内存中，并且这些内容转换成<strong>方法区</strong> 中运行时数据结构，classloader加载完class文件后 Execution Engine决定是否能够执行程序</p></blockquote><h3 id="classloader分类"><a href="#classloader分类" class="headerlink" title="classloader分类"></a>classloader分类</h3><blockquote><p>1、启动类加载器</p><p>2、拓展类加载器</p><p>3、应用程序类加载器</p><p>4、用户自定义加载器</p></blockquote><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p>    启动类加载器BootstrapClassloader也叫根加载器，是虚拟机自带的加载器由 C++实现，用户加载 jre/lib/rt.jar包中的全部class文件，rt.jar是Java基础类库，包含常见的java基础类，</p><p>eg：Object类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(obj.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure><img src="/2022/08/22/jvm/jvm_bootstrap_classloader.png" class="" title="bootstrap_classloader"><h3 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h3><p>    拓展类加载器 是 Java虚拟机自带实现，由Java语言实现用于加载 jre/lib/ext/ 目录中的全部jar包中的class文件 （jdk11 中变成 PlatformClassLoader）</p><img src="/2022/08/22/jvm/jre_ext-dir.png" class="" title="ext"><p>使用zipfs验证结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">ZipInfo</span> <span class="variable">zipInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInfo</span>();</span><br><span class="line">        System.out.println(zipInfo.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，以上代码仅能在java8及以下版本，jdk11及以上版本中已经移除ext相关目录，集成到lib/modules文件中，取代ExtClassloader 被jdk.internal PlatformClassloader取代；</p><p>从Java9开始，jdk逐步替代相关api并移除部分lib，响应的目录结构也发生变化，eg： jdk11中的目录 已经不存在ext相关jar，统一合并到 lib/modules文件中</p><h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><p>    应用程序类加载器（App Classloader）是虚拟机自带的加载器，用于加载当前应用的classpath文件中的所有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(Demo.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdk.internal.loader.ClassLoaders$AppClassLoader@71bc1ae4</span><br></pre></td></tr></table></figure><h3 id="用户自定义加载器"><a href="#用户自定义加载器" class="headerlink" title="用户自定义加载器"></a>用户自定义加载器</h3><p>    除了上述三种jvm自带类加载器外，用户还可以通过继承 ClassLoader抽象类自定义一个类加载器；不妨通过代码查找一下classloader之间的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(Demo.class.getClassLoader());</span><br><span class="line">        System.out.println(Demo.class.getClassLoader().getParent());</span><br><span class="line">        System.out.println(Demo.class.getClassLoader().getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>    运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdk.internal.loader.ClassLoaders$AppClassLoader@71bc1ae4</span><br><span class="line">jdk.internal.loader.ClassLoaders$PlatformClassLoader@7e0ea639</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>从结果过可以看出</p><p>AppClassLoader 继承自 PlatformClassLoader</p><p>PlatformClassLoader 继承自 BootstrapClassLoader</p><p>各种类加载器之间关系如图所示</p><img src="/2022/08/22/jvm/ClassLoader.png" class="" title="classloader"><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>    通过上述ClassLoader之间的关系，可以看出不同加载器加载不同位置的class文件，但是如果出现一个class文件同时出现上述的多个位置会发生什么？ 这就是类加载器常见的问题<strong>双亲委派机制</strong> , 先看一个案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 （注意请在jdk1.8中测试，jdk11 有编译检查，无法正常运行）</p><img src="/2022/08/22/jvm/double_parent_detagle.png" class=""><blockquote><p>出现这样结果，是由于jvm中的类加载器采用双亲委派机制寻找类；</p><p>双亲委派：</p><p>    当一个类加载收到加载请求，首先不会自己加载这个类，而是把相关请求交给父类去完成加载；如果是多层继承，则逐层转发；如果父类反馈无法完成加载请求，子类才会尝试自己去加载。</p></blockquote><p>所以用双亲委派机制解释上述结果，就不难理解为什么会报错；首先APPClassLoader将类加载请求转发给ExtClassLoader，ExtClassLoader转交给BootstrapClassLoader，而BootstrapClassLoader找到 java.lang.Object 类，此时的class文件是rt.jar 自然不会有main方法，只有本地classpath中自定义的Object才有main方法。</p><blockquote><p>jvm中双亲委派机制有一个好处，class文件加载规则相同；不管那个类加载器加载类，最终都是转交给BootstrapClassLoader，这样都能保证jvm自带的类库都是相同的，这样我们自定义的类不会污染jdk自带类即便类名相同，这种沙箱保护机制是非常常见的。这样不难理解jdk11删除了lib/ext并且集成到modules文件中，防止人为替换rt.jar和ext下jar文件造成安全问题。</p></blockquote><h2 id="程序计数器-–-Program-Counter-Register"><a href="#程序计数器-–-Program-Counter-Register" class="headerlink" title="程序计数器 – Program Counter Register"></a>程序计数器 – Program Counter Register</h2><p>    程序计数器 简称 PC寄存器，是线程私有的，他是一个指针，用于指向方法区中的方法字节码（栈帧 操作数栈），用于记录下一条指令执行的地址 如图所示 <img src="/2022/08/22/jvm/pc_register.png" class=""></p><blockquote><p>思考，为什么需要PC寄存器而且还是线程私有。在多线程环境中，CPU需要不停切换各个线程，有PC寄存器，CPU切换是能够准确找到当前切换回的线程改从什么地方开始继续执行</p></blockquote><h2 id="虚拟机栈-–-Java-Stack"><a href="#虚拟机栈-–-Java-Stack" class="headerlink" title="虚拟机栈 – Java Stack"></a>虚拟机栈 – Java Stack</h2><p>虚拟机栈 Java Stack也叫做 Java栈。每个线程都会创建一个Java Stack（线程私有），其中Java Stack内部报错一系列 Stack Frame（栈帧），每个栈帧对应Java一次次执行的Java Method。虚拟机栈和其他线程私有的内存区一样，和线程保持相同生命周期。虚拟机栈结构如下图所示</p><img src="/2022/08/22/jvm/java_stack.png" class=""><p>    Java Stack只有压栈和出栈操作，遵循后进先出（FILO）原则，在一个活动的线程中同一个时间点只有唯一一个活动的栈帧，当前正在执行的方法对应的栈帧；如果方法调用另外一个方法，对应的方法就会创建新的栈帧并且放在栈顶成为当前栈帧。</p><p>    Java Stack执行方法是只有两种结果，正常退出或者抛出异常结束；者两种情况都会导致栈帧被弹出结束。</p><h3 id="虚拟机栈大小调整"><a href="#虚拟机栈大小调整" class="headerlink" title="虚拟机栈大小调整"></a>虚拟机栈大小调整</h3><p>    我们可以通过-Xss参数设置虚拟机栈大小，默认单位字节。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xss1m</span><br><span class="line">-Xss1g</span><br><span class="line">-Xss24k</span><br></pre></td></tr></table></figure><p>    虚拟机栈大小影响方法调用的深度，栈设置越大，方法调用深度越深</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> java </tag>
            
            <tag> classloader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内访问Github</title>
      <link href="/2022/08/20/travel-github/"/>
      <url>/2022/08/20/travel-github/</url>
      
        <content type="html"><![CDATA[<h2 id="github访问"><a href="#github访问" class="headerlink" title="github访问"></a>github访问</h2><blockquote><p>github 作为全球最大的开源代码托管平台，但是受限于国内网络环境，Github并未在中国大陆建立镜像；通过域名反向解析 Github最近站点都在 新加坡; 网上大多数采用自建梯子方式访问，毕竟不是合法方式</p><p>解决dns解析Github速度慢，或者dns被污染是最简单有效的途径</p></blockquote><ul><li>国内优质dns<ul><li><p><a href="https://alidns.com/">阿里DNS (alidns.com)</a></p></li><li><p>谷歌dns <a href="https://developers.google.cn/speed/public-dns/">Public DNS  |  Google Developers</a></p></li><li><p>微软dns <a href="https://blog.csdn.net/weixin_39666550/article/details/119267446">微软自带dns服务器,win10微软设置哪个DNS服务器地址最快_weixin_39666550的博客-CSDN博客</a></p></li></ul></li></ul><p> 笔者直接使用 阿里云DNS，阿里云DNS</p><img src="/2022/08/20/travel-github/20220820181718.png" class="" title="aliyundns"><p>打开自己的电脑 网络设置</p><img src="/2022/08/20/travel-github/20220820181842.png" class=""><p>编辑网络 将阿里云dns地址配置上</p><img src="/2022/08/20/travel-github/20220820182159.png" class="" title="logo"><ul><li>访问 github 测试</li></ul><blockquote><p>github站点中的图片都能正常的打卡也没出现卡顿</p></blockquote><img src="/2022/08/20/travel-github/20220820182931.png" class="" title="test">]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的hexo</title>
      <link href="/2022/08/20/buildhexo/"/>
      <url>/2022/08/20/buildhexo/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建属于自己的博客"><a href="#搭建属于自己的博客" class="headerlink" title="搭建属于自己的博客"></a>搭建属于自己的博客</h1><ul><li>安装 hexo</li></ul><blockquote><p>hexo 依赖 nodejs ，由于国内npm访问速度过慢，需要配置国内代理镜像。配置好nodejs执行下列命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ul><li>选择主题</li></ul><blockquote><p>hexo支持自定义主题，博主可根据自身喜好配置不同的主题，本次直接butterfly</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先创建 hexo 博客</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入目录 下载主题</span></span><br><span class="line">cd blog</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><blockquote><p>配置 butterfly主题，修改 _config.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><blockquote><p>同时在博客工程根目录中创建 _config.butterfly.yml 文件 并且将 themes/butterfly/_config.yml 中的内容全部拷贝, 效果如下</p></blockquote><img src="/2022/08/20/buildhexo/2022-08-20-14-17-27-image.png" class="" title="logo"><ul><li>安装必要插件</li></ul><blockquote><p>hexo最终的要的能力是插件机制和插件市场 访问站点找到自己需要的插件</p><p>1、搜索插件 hexo-generator-search</p><p>2、本地图片插件 hexo-asset-img</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><ul><li>配置站点基本信息</li></ul><blockquote><p>配置站点基本信息</p><p>1、站点地址 SEO关键词</p><p>2、主题中 标签，抬头菜单</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点基本信息 _config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;副标题&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;站点描述&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">seo</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点基本连接信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://blog.xxx.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索插件</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># butterfly 主题配置 _config.butterfly.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">   <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">   <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">   <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交信息</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">   <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxx||</span> <span class="string">Github</span></span><br><span class="line">   <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxx@mail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置搜索能力 ，此能力需要插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><ul><li>写作</li></ul><blockquote><p>写作前需要配置几个基本的内容</p><p>1、分类目录</p><p>2、标签目录</p><p>创建完对应的目录即可使用相应的抬头属性 , 切换到source 目录中 创建categories tags，并且在对应的目录中创建 index.md 文件</p><p>index.md 需要遵循hexo语法，内容如下，分别填写 对应目录内容，最终效果如下图</p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><img src="/2022/08/20/buildhexo/20220820143809.png" class="" title="logo"><blockquote><p>创建写作内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在对应博客站点根目录执行命令</span></span><br><span class="line">hexo new post demo</span><br></pre></td></tr></table></figure><p>进入 source/_post/demo.md 编写 markdown文件内容开始创作</p><ul><li>更多配置操作内容 可查询官方网站</li></ul><blockquote><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安裝文檔(一) 快速開始 | Butterfly</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> site </category>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
